1/ docker practice:
 <Build image flask python sau>:
- Tạo thư mục với tên webui:
mkdir -p webui
cd webui
- Tạo 1 file webui.py với lenh sau:

cat << EOF > webui.py
from flask import Flask
import os
import psycopg2

app = Flask(__name__)

DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    conn = psycopg2.connect(DATABASE_URL)
    return conn

@app.route('/')
def index():
    try: 
     conn = get_db_connection()
     cur = conn.cursor()
     cur.execute('SELECT version();')
     db_version = cur.fetchone()
     cur.close()
     conn.close()
     response = f"""
        <h1>Chao mung den voi docker webserver</h1>
        <p>Database version: {db_version}</p>
        """
     return response
    except:
     return "Chao mung den voi webserver!"

if __name__ == '__main__':
    app.run(host='0.0.0.0')
EOF

- Taọ file requirements.txt với lenh sau:

cat << EOF > requirements.txt 
Flask
psycopg2-binary
EOF

- Tạo file dockerfile với lenh sau:

cat << EOF > dockerfile
# Load python package moi nhat tren docker hub
FROM python:3.9-slim

# Chon working directory cho container
WORKDIR /usr/src/app

# Copy requirements file vao trong container
COPY requirements.txt ./

# Cai` cac' goi' phu thuoc cho container
RUN pip install --no-cache-dir -r requirements.txt

# Copy code python vao trong container
COPY webui.py .

# chay web server sau khi container duoc khoi dong
CMD ["python", "webui.py"]

EOF

- Build image webui với lệnh sau: ( chu y copy ca dau .)
docker build -t webui:1.0 .

- Kiem tra image vừa build được với lệnh: docker images
Ket qua mau: 
----
root@ubuntu-test-01:/home/sf/docker-all/webui# docker images
REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
webui         1.0       f093ef4a885c   8 seconds ago   143MB
<none>        <none>    46561428bdb5   9 minutes ago   143MB
hello-world   latest    d2c94e258dcb   15 months ago   13.3kB
----

- Push image lên docker hub repo: (bước này có thể thực hiện hoặc bỏ qua)
+ Tạo 1 tài khoản docker hub: search google "create docker hub account" và làm theo hướng dẫn
+ Tạo 1 repo mới: vd: test
+ Gõ lệnh docker login và điền username và password cua tài khoan docker hub vừa tạo
+ Gõ lệnh docker tag webui:1.0 <docker_hub_username>/test:tag
Ví dụ: docker tag webui:1.0 thanhnv25121994/test:webui_1.0
+ Push image lên repo: docker push thanhnv25121994/test:webui_1.0

Ket qua mau: 
---
root@ubuntu-test-01:/home/sf/docker-all/webui# docker push thanhnv25121994/test:webui_1.0
The push refers to repository [docker.io/thanhnv25121994/test]
9f9b90b8b06e: Pushed 
6d8b23512449: Pushed 
08b264d356b4: Pushed 
55e154953e80: Pushed 
337337a89bc6: Mounted from library/python 
6e1edc42bbcc: Mounted from library/python 
da6d0db38dea: Mounted from library/python 
4e4410552731: Mounted from library/python 
e0781bc8667f: Mounted from library/python 
webui_1.0: digest: sha256:6f0a69867ff94857fd2b021b8bca1734adb4070b5e7b2cbde41ef35d2c9f24b9 size: 2202
---

- Chạy lệnh sau de khoi dong container webserver: 
docker run -d -p 5000:5000 webui:1.0

- Xem webui vừa tạo với lệnh sau: curl localhost:5000 

Ket qua mau: 
---
root@ubuntu-test-01:/home/sf/docker-all/webui# curl localhost:5000
Chao mung den voi webserver!
---


2/ Docker-compose:
- Hoàn thiện toàn bo các bước o mục 1/ docker practice phía trên
- Chạy lệnh sau đe cài docker-compse: 
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
cp /usr/local/bin/docker-compose /usr/bin/docker-compose
docker-compose --version

- Tạo file docker-compose.yaml với command sau:

cat <<EOF> docker-compose.yaml
version: '3.8'

services:
  webui:
    image: webui:1.0
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/mydatabase
    depends_on:
      - db

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - webui

  db:
    image: postgres:latest
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
EOF

- Tạo file nginx.conf với command sau: 

cat <<EOF>nginx.conf
events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;  # Include MIME type mappings
    default_type  application/octet-stream;

    # Basic settings
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    gzip            on;

    server {
        listen 80;
        server_name _;  # Default server name

        location / {
            proxy_pass http://webui:5000;  # Forward requests to the webui service on port 5000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
    }
}
EOF

- Chay lenh sau de khoi dong docker-compose stack:
docker-compose up -d 

- Chay lenh sau de kiem tra: curl localhost:80

ket qua mau
---
root@ubuntu-test-01:/home/sf# curl localhost:80

       <h1>Chao mung den voi docker webserver</h1>
        <p>Database version: ('PostgreSQL 16.3 (Debian 16.3-1.pgdg120+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 12.2.0-14) 12.2.0, 64-bit',)</p>
---

- Chay lenh sau de kiem tra docker-compose:
docker-compose ps

ket qua mau
---
root@ubuntu-test-01:/home/sf# docker-compose ps
   Name                 Command               State                Ports              
--------------------------------------------------------------------------------------
sf_db_1      docker-entrypoint.sh postgres    Up      5432/tcp                        
sf_nginx_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:80->80/tcp,:::80->80/tcp
sf_webui_1   python webui.py		      Up
---

Khi thay ca 3 server sf_db_1,sf_nginx_1 và sf_webui_1 đeu có state là Up có nghia la thanh cong



